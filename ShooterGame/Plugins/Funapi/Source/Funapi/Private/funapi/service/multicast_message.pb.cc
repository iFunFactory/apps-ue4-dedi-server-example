// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: funapi/service/multicast_message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "funapi/service/multicast_message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* FunMulticastChannelListMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FunMulticastChannelListMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* FunMulticastMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FunMulticastMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FunMulticastMessage_ErrorCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FunChatMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FunChatMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_funapi_2fservice_2fmulticast_5fmessage_2eproto() {
  protobuf_AddDesc_funapi_2fservice_2fmulticast_5fmessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "funapi/service/multicast_message.proto");
  GOOGLE_CHECK(file != NULL);
  FunMulticastChannelListMessage_descriptor_ = file->message_type(0);
  static const int FunMulticastChannelListMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunMulticastChannelListMessage, channel_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunMulticastChannelListMessage, num_members_),
  };
  FunMulticastChannelListMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FunMulticastChannelListMessage_descriptor_,
      FunMulticastChannelListMessage::default_instance_,
      FunMulticastChannelListMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunMulticastChannelListMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunMulticastChannelListMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FunMulticastChannelListMessage));
  FunMulticastMessage_descriptor_ = file->message_type(1);
  static const int FunMulticastMessage_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunMulticastMessage, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunMulticastMessage, join_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunMulticastMessage, leave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunMulticastMessage, bounce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunMulticastMessage, sender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunMulticastMessage, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunMulticastMessage, channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunMulticastMessage, token_),
  };
  FunMulticastMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FunMulticastMessage_descriptor_,
      FunMulticastMessage::default_instance_,
      FunMulticastMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunMulticastMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunMulticastMessage, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunMulticastMessage, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FunMulticastMessage));
  FunMulticastMessage_ErrorCode_descriptor_ = FunMulticastMessage_descriptor_->enum_type(0);
  FunChatMessage_descriptor_ = file->message_type(2);
  static const int FunChatMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunChatMessage, text_),
  };
  FunChatMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FunChatMessage_descriptor_,
      FunChatMessage::default_instance_,
      FunChatMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunChatMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunChatMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FunChatMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_funapi_2fservice_2fmulticast_5fmessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FunMulticastChannelListMessage_descriptor_, &FunMulticastChannelListMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FunMulticastMessage_descriptor_, &FunMulticastMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FunChatMessage_descriptor_, &FunChatMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_funapi_2fservice_2fmulticast_5fmessage_2eproto() {
  delete FunMulticastChannelListMessage::default_instance_;
  delete FunMulticastChannelListMessage_reflection_;
  delete FunMulticastMessage::default_instance_;
  delete FunMulticastMessage_reflection_;
  delete FunChatMessage::default_instance_;
  delete FunChatMessage_reflection_;
}

void protobuf_AddDesc_funapi_2fservice_2fmulticast_5fmessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_funapi_2fnetwork_2ffun_5fmessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n&funapi/service/multicast_message.proto"
    "\032 funapi/network/fun_message.proto\"K\n\036Fu"
    "nMulticastChannelListMessage\022\024\n\014channel_"
    "name\030\001 \002(\t\022\023\n\013num_members\030\002 \001(\r\"\364\002\n\023FunM"
    "ulticastMessage\022\017\n\007channel\030\001 \001(\t\022\014\n\004join"
    "\030\002 \001(\010\022\r\n\005leave\030\003 \001(\010\022\016\n\006bounce\030\004 \001(\010\022\016\n"
    "\006sender\030\005 \001(\t\0222\n\nerror_code\030\006 \001(\0162\036.FunM"
    "ulticastMessage.ErrorCode\0221\n\010channels\030\007 "
    "\003(\0132\037.FunMulticastChannelListMessage\022\r\n\005"
    "token\030\010 \001(\t\"\216\001\n\tErrorCode\022\025\n\021EC_ALREADY_"
    "JOINED\020\001\022\023\n\017EC_ALREADY_LEFT\020\002\022\022\n\016EC_FULL"
    "_MEMBER\020\003\022\r\n\tEC_CLOSED\020\004\022\024\n\020EC_INVALID_T"
    "OKEN\020\005\022\034\n\030EC_CANNOT_CREATE_CHANNEL\020\006*\010\010\n"
    "\020\200\200\200\200\002\"\036\n\016FunChatMessage\022\014\n\004text\030\001 \001(\t:3"
    "\n\004chat\022\024.FunMulticastMessage\030\n \001(\0132\017.Fun"
    "ChatMessage:4\n\tmulticast\022\013.FunMessage\030\010 "
    "\001(\0132\024.FunMulticastMessage", 665);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "funapi/service/multicast_message.proto", &protobuf_RegisterTypes);
  FunMulticastChannelListMessage::default_instance_ = new FunMulticastChannelListMessage();
  FunMulticastMessage::default_instance_ = new FunMulticastMessage();
  FunChatMessage::default_instance_ = new FunChatMessage();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::FunMulticastMessage::default_instance(),
    10, 11, false, false,
    &::FunChatMessage::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::FunMessage::default_instance(),
    8, 11, false, false,
    &::FunMulticastMessage::default_instance());
  FunMulticastChannelListMessage::default_instance_->InitAsDefaultInstance();
  FunMulticastMessage::default_instance_->InitAsDefaultInstance();
  FunChatMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_funapi_2fservice_2fmulticast_5fmessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_funapi_2fservice_2fmulticast_5fmessage_2eproto {
  StaticDescriptorInitializer_funapi_2fservice_2fmulticast_5fmessage_2eproto() {
    protobuf_AddDesc_funapi_2fservice_2fmulticast_5fmessage_2eproto();
  }
} static_descriptor_initializer_funapi_2fservice_2fmulticast_5fmessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int FunMulticastChannelListMessage::kChannelNameFieldNumber;
const int FunMulticastChannelListMessage::kNumMembersFieldNumber;
#endif  // !_MSC_VER

FunMulticastChannelListMessage::FunMulticastChannelListMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FunMulticastChannelListMessage)
}

void FunMulticastChannelListMessage::InitAsDefaultInstance() {
}

FunMulticastChannelListMessage::FunMulticastChannelListMessage(const FunMulticastChannelListMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FunMulticastChannelListMessage)
}

void FunMulticastChannelListMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  channel_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_members_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FunMulticastChannelListMessage::~FunMulticastChannelListMessage() {
  // @@protoc_insertion_point(destructor:FunMulticastChannelListMessage)
  SharedDtor();
}

void FunMulticastChannelListMessage::SharedDtor() {
  if (channel_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channel_name_;
  }
  if (this != default_instance_) {
  }
}

void FunMulticastChannelListMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FunMulticastChannelListMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FunMulticastChannelListMessage_descriptor_;
}

const FunMulticastChannelListMessage& FunMulticastChannelListMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_funapi_2fservice_2fmulticast_5fmessage_2eproto();
  return *default_instance_;
}

FunMulticastChannelListMessage* FunMulticastChannelListMessage::default_instance_ = NULL;

FunMulticastChannelListMessage* FunMulticastChannelListMessage::New() const {
  return new FunMulticastChannelListMessage;
}

void FunMulticastChannelListMessage::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_channel_name()) {
      if (channel_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        channel_name_->clear();
      }
    }
    num_members_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FunMulticastChannelListMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FunMulticastChannelListMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string channel_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channel_name().data(), this->channel_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "channel_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num_members;
        break;
      }

      // optional uint32 num_members = 2;
      case 2: {
        if (tag == 16) {
         parse_num_members:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_members_)));
          set_has_num_members();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FunMulticastChannelListMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FunMulticastChannelListMessage)
  return false;
#undef DO_
}

void FunMulticastChannelListMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FunMulticastChannelListMessage)
  // required string channel_name = 1;
  if (has_channel_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_name().data(), this->channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->channel_name(), output);
  }

  // optional uint32 num_members = 2;
  if (has_num_members()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num_members(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FunMulticastChannelListMessage)
}

::google::protobuf::uint8* FunMulticastChannelListMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FunMulticastChannelListMessage)
  // required string channel_name = 1;
  if (has_channel_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_name().data(), this->channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->channel_name(), target);
  }

  // optional uint32 num_members = 2;
  if (has_num_members()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num_members(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FunMulticastChannelListMessage)
  return target;
}

int FunMulticastChannelListMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string channel_name = 1;
    if (has_channel_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_name());
    }

    // optional uint32 num_members = 2;
    if (has_num_members()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_members());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FunMulticastChannelListMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FunMulticastChannelListMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FunMulticastChannelListMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FunMulticastChannelListMessage::MergeFrom(const FunMulticastChannelListMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel_name()) {
      set_channel_name(from.channel_name());
    }
    if (from.has_num_members()) {
      set_num_members(from.num_members());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FunMulticastChannelListMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunMulticastChannelListMessage::CopyFrom(const FunMulticastChannelListMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunMulticastChannelListMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FunMulticastChannelListMessage::Swap(FunMulticastChannelListMessage* other) {
  if (other != this) {
    std::swap(channel_name_, other->channel_name_);
    std::swap(num_members_, other->num_members_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FunMulticastChannelListMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FunMulticastChannelListMessage_descriptor_;
  metadata.reflection = FunMulticastChannelListMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* FunMulticastMessage_ErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FunMulticastMessage_ErrorCode_descriptor_;
}
bool FunMulticastMessage_ErrorCode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FunMulticastMessage_ErrorCode FunMulticastMessage::EC_ALREADY_JOINED;
const FunMulticastMessage_ErrorCode FunMulticastMessage::EC_ALREADY_LEFT;
const FunMulticastMessage_ErrorCode FunMulticastMessage::EC_FULL_MEMBER;
const FunMulticastMessage_ErrorCode FunMulticastMessage::EC_CLOSED;
const FunMulticastMessage_ErrorCode FunMulticastMessage::EC_INVALID_TOKEN;
const FunMulticastMessage_ErrorCode FunMulticastMessage::EC_CANNOT_CREATE_CHANNEL;
const FunMulticastMessage_ErrorCode FunMulticastMessage::ErrorCode_MIN;
const FunMulticastMessage_ErrorCode FunMulticastMessage::ErrorCode_MAX;
const int FunMulticastMessage::ErrorCode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int FunMulticastMessage::kChannelFieldNumber;
const int FunMulticastMessage::kJoinFieldNumber;
const int FunMulticastMessage::kLeaveFieldNumber;
const int FunMulticastMessage::kBounceFieldNumber;
const int FunMulticastMessage::kSenderFieldNumber;
const int FunMulticastMessage::kErrorCodeFieldNumber;
const int FunMulticastMessage::kChannelsFieldNumber;
const int FunMulticastMessage::kTokenFieldNumber;
#endif  // !_MSC_VER

FunMulticastMessage::FunMulticastMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FunMulticastMessage)
}

void FunMulticastMessage::InitAsDefaultInstance() {
}

FunMulticastMessage::FunMulticastMessage(const FunMulticastMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FunMulticastMessage)
}

void FunMulticastMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  join_ = false;
  leave_ = false;
  bounce_ = false;
  sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_code_ = 1;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FunMulticastMessage::~FunMulticastMessage() {
  // @@protoc_insertion_point(destructor:FunMulticastMessage)
  SharedDtor();
}

void FunMulticastMessage::SharedDtor() {
  if (channel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channel_;
  }
  if (sender_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sender_;
  }
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void FunMulticastMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FunMulticastMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FunMulticastMessage_descriptor_;
}

const FunMulticastMessage& FunMulticastMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_funapi_2fservice_2fmulticast_5fmessage_2eproto();
  return *default_instance_;
}

FunMulticastMessage* FunMulticastMessage::default_instance_ = NULL;

FunMulticastMessage* FunMulticastMessage::New() const {
  return new FunMulticastMessage;
}

void FunMulticastMessage::Clear() {
  _extensions_.Clear();
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FunMulticastMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 191) {
    ZR_(join_, bounce_);
    if (has_channel()) {
      if (channel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        channel_->clear();
      }
    }
    if (has_sender()) {
      if (sender_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sender_->clear();
      }
    }
    error_code_ = 1;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  channels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FunMulticastMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FunMulticastMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string channel = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channel().data(), this->channel().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "channel");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_join;
        break;
      }

      // optional bool join = 2;
      case 2: {
        if (tag == 16) {
         parse_join:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &join_)));
          set_has_join();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_leave;
        break;
      }

      // optional bool leave = 3;
      case 3: {
        if (tag == 24) {
         parse_leave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &leave_)));
          set_has_leave();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_bounce;
        break;
      }

      // optional bool bounce = 4;
      case 4: {
        if (tag == 32) {
         parse_bounce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bounce_)));
          set_has_bounce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_sender;
        break;
      }

      // optional string sender = 5;
      case 5: {
        if (tag == 42) {
         parse_sender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sender().data(), this->sender().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sender");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_error_code;
        break;
      }

      // optional .FunMulticastMessage.ErrorCode error_code = 6;
      case 6: {
        if (tag == 48) {
         parse_error_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::FunMulticastMessage_ErrorCode_IsValid(value)) {
            set_error_code(static_cast< ::FunMulticastMessage_ErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_channels;
        break;
      }

      // repeated .FunMulticastChannelListMessage channels = 7;
      case 7: {
        if (tag == 58) {
         parse_channels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_channels()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_channels;
        if (input->ExpectTag(66)) goto parse_token;
        break;
      }

      // optional string token = 8;
      case 8: {
        if (tag == 66) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((80u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FunMulticastMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FunMulticastMessage)
  return false;
#undef DO_
}

void FunMulticastMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FunMulticastMessage)
  // optional string channel = 1;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->channel(), output);
  }

  // optional bool join = 2;
  if (has_join()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->join(), output);
  }

  // optional bool leave = 3;
  if (has_leave()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->leave(), output);
  }

  // optional bool bounce = 4;
  if (has_bounce()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->bounce(), output);
  }

  // optional string sender = 5;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sender");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->sender(), output);
  }

  // optional .FunMulticastMessage.ErrorCode error_code = 6;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->error_code(), output);
  }

  // repeated .FunMulticastChannelListMessage channels = 7;
  for (int i = 0; i < this->channels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->channels(i), output);
  }

  // optional string token = 8;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->token(), output);
  }

  // Extension range [10, 536870912)
  _extensions_.SerializeWithCachedSizes(
      10, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FunMulticastMessage)
}

::google::protobuf::uint8* FunMulticastMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FunMulticastMessage)
  // optional string channel = 1;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->channel(), target);
  }

  // optional bool join = 2;
  if (has_join()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->join(), target);
  }

  // optional bool leave = 3;
  if (has_leave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->leave(), target);
  }

  // optional bool bounce = 4;
  if (has_bounce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->bounce(), target);
  }

  // optional string sender = 5;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sender");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sender(), target);
  }

  // optional .FunMulticastMessage.ErrorCode error_code = 6;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->error_code(), target);
  }

  // repeated .FunMulticastChannelListMessage channels = 7;
  for (int i = 0; i < this->channels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->channels(i), target);
  }

  // optional string token = 8;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->token(), target);
  }

  // Extension range [10, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      10, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FunMulticastMessage)
  return target;
}

int FunMulticastMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string channel = 1;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel());
    }

    // optional bool join = 2;
    if (has_join()) {
      total_size += 1 + 1;
    }

    // optional bool leave = 3;
    if (has_leave()) {
      total_size += 1 + 1;
    }

    // optional bool bounce = 4;
    if (has_bounce()) {
      total_size += 1 + 1;
    }

    // optional string sender = 5;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender());
    }

    // optional .FunMulticastMessage.ErrorCode error_code = 6;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }

    // optional string token = 8;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  // repeated .FunMulticastChannelListMessage channels = 7;
  total_size += 1 * this->channels_size();
  for (int i = 0; i < this->channels_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->channels(i));
  }

  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FunMulticastMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FunMulticastMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FunMulticastMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FunMulticastMessage::MergeFrom(const FunMulticastMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  channels_.MergeFrom(from.channels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_join()) {
      set_join(from.join());
    }
    if (from.has_leave()) {
      set_leave(from.leave());
    }
    if (from.has_bounce()) {
      set_bounce(from.bounce());
    }
    if (from.has_sender()) {
      set_sender(from.sender());
    }
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FunMulticastMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunMulticastMessage::CopyFrom(const FunMulticastMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunMulticastMessage::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->channels())) return false;

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void FunMulticastMessage::Swap(FunMulticastMessage* other) {
  if (other != this) {
    std::swap(channel_, other->channel_);
    std::swap(join_, other->join_);
    std::swap(leave_, other->leave_);
    std::swap(bounce_, other->bounce_);
    std::swap(sender_, other->sender_);
    std::swap(error_code_, other->error_code_);
    channels_.Swap(&other->channels_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata FunMulticastMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FunMulticastMessage_descriptor_;
  metadata.reflection = FunMulticastMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FunChatMessage::kTextFieldNumber;
#endif  // !_MSC_VER

FunChatMessage::FunChatMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FunChatMessage)
}

void FunChatMessage::InitAsDefaultInstance() {
}

FunChatMessage::FunChatMessage(const FunChatMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FunChatMessage)
}

void FunChatMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FunChatMessage::~FunChatMessage() {
  // @@protoc_insertion_point(destructor:FunChatMessage)
  SharedDtor();
}

void FunChatMessage::SharedDtor() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void FunChatMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FunChatMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FunChatMessage_descriptor_;
}

const FunChatMessage& FunChatMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_funapi_2fservice_2fmulticast_5fmessage_2eproto();
  return *default_instance_;
}

FunChatMessage* FunChatMessage::default_instance_ = NULL;

FunChatMessage* FunChatMessage::New() const {
  return new FunChatMessage;
}

void FunChatMessage::Clear() {
  if (has_text()) {
    if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      text_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FunChatMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FunChatMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string text = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FunChatMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FunChatMessage)
  return false;
#undef DO_
}

void FunChatMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FunChatMessage)
  // optional string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FunChatMessage)
}

::google::protobuf::uint8* FunChatMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FunChatMessage)
  // optional string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FunChatMessage)
  return target;
}

int FunChatMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FunChatMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FunChatMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FunChatMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FunChatMessage::MergeFrom(const FunChatMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FunChatMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunChatMessage::CopyFrom(const FunChatMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunChatMessage::IsInitialized() const {

  return true;
}

void FunChatMessage::Swap(FunChatMessage* other) {
  if (other != this) {
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FunChatMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FunChatMessage_descriptor_;
  metadata.reflection = FunChatMessage_reflection_;
  return metadata;
}

::google::protobuf::internal::ExtensionIdentifier< ::FunMulticastMessage,
    ::google::protobuf::internal::MessageTypeTraits< ::FunChatMessage >, 11, false >
  chat(kChatFieldNumber, ::FunChatMessage::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::FunMessage,
    ::google::protobuf::internal::MessageTypeTraits< ::FunMulticastMessage >, 11, false >
  multicast(kMulticastFieldNumber, ::FunMulticastMessage::default_instance());

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
