// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: funapi/service/redirect_message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "funapi/service/redirect_message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* FunRedirectMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FunRedirectMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* FunRedirectMessage_ServerPort_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FunRedirectMessage_ServerPort_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FunRedirectMessage_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FunRedirectMessage_Encoding_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FunRedirectConnectMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FunRedirectConnectMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FunRedirectConnectMessage_Result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FunDedicatedServerRedirectMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FunDedicatedServerRedirectMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* FunDedicatedServerMesseage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FunDedicatedServerMesseage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_funapi_2fservice_2fredirect_5fmessage_2eproto() {
  protobuf_AddDesc_funapi_2fservice_2fredirect_5fmessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "funapi/service/redirect_message.proto");
  GOOGLE_CHECK(file != NULL);
  FunRedirectMessage_descriptor_ = file->message_type(0);
  static const int FunRedirectMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunRedirectMessage, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunRedirectMessage, ports_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunRedirectMessage, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunRedirectMessage, flavor_),
  };
  FunRedirectMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FunRedirectMessage_descriptor_,
      FunRedirectMessage::default_instance_,
      FunRedirectMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunRedirectMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunRedirectMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FunRedirectMessage));
  FunRedirectMessage_ServerPort_descriptor_ = FunRedirectMessage_descriptor_->nested_type(0);
  static const int FunRedirectMessage_ServerPort_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunRedirectMessage_ServerPort, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunRedirectMessage_ServerPort, protocol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunRedirectMessage_ServerPort, encoding_),
  };
  FunRedirectMessage_ServerPort_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FunRedirectMessage_ServerPort_descriptor_,
      FunRedirectMessage_ServerPort::default_instance_,
      FunRedirectMessage_ServerPort_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunRedirectMessage_ServerPort, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunRedirectMessage_ServerPort, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FunRedirectMessage_ServerPort));
  FunRedirectMessage_Protocol_descriptor_ = FunRedirectMessage_descriptor_->enum_type(0);
  FunRedirectMessage_Encoding_descriptor_ = FunRedirectMessage_descriptor_->enum_type(1);
  FunRedirectConnectMessage_descriptor_ = file->message_type(1);
  static const int FunRedirectConnectMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunRedirectConnectMessage, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunRedirectConnectMessage, result_),
  };
  FunRedirectConnectMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FunRedirectConnectMessage_descriptor_,
      FunRedirectConnectMessage::default_instance_,
      FunRedirectConnectMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunRedirectConnectMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunRedirectConnectMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FunRedirectConnectMessage));
  FunRedirectConnectMessage_Result_descriptor_ = FunRedirectConnectMessage_descriptor_->enum_type(0);
  FunDedicatedServerRedirectMessage_descriptor_ = file->message_type(2);
  static const int FunDedicatedServerRedirectMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunDedicatedServerRedirectMessage, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunDedicatedServerRedirectMessage, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunDedicatedServerRedirectMessage, token_),
  };
  FunDedicatedServerRedirectMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FunDedicatedServerRedirectMessage_descriptor_,
      FunDedicatedServerRedirectMessage::default_instance_,
      FunDedicatedServerRedirectMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunDedicatedServerRedirectMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunDedicatedServerRedirectMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FunDedicatedServerRedirectMessage));
  FunDedicatedServerMesseage_descriptor_ = file->message_type(3);
  static const int FunDedicatedServerMesseage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunDedicatedServerMesseage, redirect_),
  };
  FunDedicatedServerMesseage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FunDedicatedServerMesseage_descriptor_,
      FunDedicatedServerMesseage::default_instance_,
      FunDedicatedServerMesseage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunDedicatedServerMesseage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunDedicatedServerMesseage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FunDedicatedServerMesseage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_funapi_2fservice_2fredirect_5fmessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FunRedirectMessage_descriptor_, &FunRedirectMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FunRedirectMessage_ServerPort_descriptor_, &FunRedirectMessage_ServerPort::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FunRedirectConnectMessage_descriptor_, &FunRedirectConnectMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FunDedicatedServerRedirectMessage_descriptor_, &FunDedicatedServerRedirectMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FunDedicatedServerMesseage_descriptor_, &FunDedicatedServerMesseage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_funapi_2fservice_2fredirect_5fmessage_2eproto() {
  delete FunRedirectMessage::default_instance_;
  delete FunRedirectMessage_reflection_;
  delete FunRedirectMessage_ServerPort::default_instance_;
  delete FunRedirectMessage_ServerPort_reflection_;
  delete FunRedirectConnectMessage::default_instance_;
  delete FunRedirectConnectMessage_reflection_;
  delete FunDedicatedServerRedirectMessage::default_instance_;
  delete FunDedicatedServerRedirectMessage_reflection_;
  delete FunDedicatedServerMesseage::default_instance_;
  delete FunDedicatedServerMesseage_reflection_;
}

void protobuf_AddDesc_funapi_2fservice_2fredirect_5fmessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_funapi_2fnetwork_2ffun_5fmessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n%funapi/service/redirect_message.proto\032"
    " funapi/network/fun_message.proto\"\334\002\n\022Fu"
    "nRedirectMessage\022\014\n\004host\030\001 \002(\t\022-\n\005ports\030"
    "\002 \003(\0132\036.FunRedirectMessage.ServerPort\022\r\n"
    "\005token\030\003 \002(\t\022\016\n\006flavor\030\004 \002(\t\032z\n\nServerPo"
    "rt\022\014\n\004port\030\001 \002(\005\022.\n\010protocol\030\002 \002(\0162\034.Fun"
    "RedirectMessage.Protocol\022.\n\010encoding\030\003 \002"
    "(\0162\034.FunRedirectMessage.Encoding\"8\n\010Prot"
    "ocol\022\r\n\tPROTO_TCP\020\001\022\r\n\tPROTO_UDP\020\002\022\016\n\nPR"
    "OTO_HTTP\020\003\"4\n\010Encoding\022\021\n\rENCODING_JSON\020"
    "\001\022\025\n\021ENCODING_PROTOBUF\020\002\"\240\001\n\031FunRedirect"
    "ConnectMessage\022\r\n\005token\030\001 \001(\t\0221\n\006result\030"
    "\002 \001(\0162!.FunRedirectConnectMessage.Result"
    "\"A\n\006Result\022\006\n\002OK\020\000\022\021\n\rINVALID_TOKEN\020\001\022\013\n"
    "\007EXPIRED\020\002\022\017\n\013AUTH_FAILED\020\003\"N\n!FunDedica"
    "tedServerRedirectMessage\022\014\n\004host\030\001 \002(\t\022\014"
    "\n\004port\030\002 \002(\005\022\r\n\005token\030\003 \002(\t\"R\n\032FunDedica"
    "tedServerMesseage\0224\n\010redirect\030\001 \001(\0132\".Fu"
    "nDedicatedServerRedirectMessage:6\n\014_sc_r"
    "edirect\022\013.FunMessage\030\n \001(\0132\023.FunRedirect"
    "Message:E\n\024_cs_redirect_connect\022\013.FunMes"
    "sage\030\013 \001(\0132\032.FunRedirectConnectMessage:F"
    "\n\024_sc_dedicated_server\022\013.FunMessage\030\014 \001("
    "\0132\033.FunDedicatedServerMesseage", 950);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "funapi/service/redirect_message.proto", &protobuf_RegisterTypes);
  FunRedirectMessage::default_instance_ = new FunRedirectMessage();
  FunRedirectMessage_ServerPort::default_instance_ = new FunRedirectMessage_ServerPort();
  FunRedirectConnectMessage::default_instance_ = new FunRedirectConnectMessage();
  FunDedicatedServerRedirectMessage::default_instance_ = new FunDedicatedServerRedirectMessage();
  FunDedicatedServerMesseage::default_instance_ = new FunDedicatedServerMesseage();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::FunMessage::default_instance(),
    10, 11, false, false,
    &::FunRedirectMessage::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::FunMessage::default_instance(),
    11, 11, false, false,
    &::FunRedirectConnectMessage::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::FunMessage::default_instance(),
    12, 11, false, false,
    &::FunDedicatedServerMesseage::default_instance());
  FunRedirectMessage::default_instance_->InitAsDefaultInstance();
  FunRedirectMessage_ServerPort::default_instance_->InitAsDefaultInstance();
  FunRedirectConnectMessage::default_instance_->InitAsDefaultInstance();
  FunDedicatedServerRedirectMessage::default_instance_->InitAsDefaultInstance();
  FunDedicatedServerMesseage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_funapi_2fservice_2fredirect_5fmessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_funapi_2fservice_2fredirect_5fmessage_2eproto {
  StaticDescriptorInitializer_funapi_2fservice_2fredirect_5fmessage_2eproto() {
    protobuf_AddDesc_funapi_2fservice_2fredirect_5fmessage_2eproto();
  }
} static_descriptor_initializer_funapi_2fservice_2fredirect_5fmessage_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* FunRedirectMessage_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FunRedirectMessage_Protocol_descriptor_;
}
bool FunRedirectMessage_Protocol_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FunRedirectMessage_Protocol FunRedirectMessage::PROTO_TCP;
const FunRedirectMessage_Protocol FunRedirectMessage::PROTO_UDP;
const FunRedirectMessage_Protocol FunRedirectMessage::PROTO_HTTP;
const FunRedirectMessage_Protocol FunRedirectMessage::Protocol_MIN;
const FunRedirectMessage_Protocol FunRedirectMessage::Protocol_MAX;
const int FunRedirectMessage::Protocol_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* FunRedirectMessage_Encoding_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FunRedirectMessage_Encoding_descriptor_;
}
bool FunRedirectMessage_Encoding_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FunRedirectMessage_Encoding FunRedirectMessage::ENCODING_JSON;
const FunRedirectMessage_Encoding FunRedirectMessage::ENCODING_PROTOBUF;
const FunRedirectMessage_Encoding FunRedirectMessage::Encoding_MIN;
const FunRedirectMessage_Encoding FunRedirectMessage::Encoding_MAX;
const int FunRedirectMessage::Encoding_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int FunRedirectMessage_ServerPort::kPortFieldNumber;
const int FunRedirectMessage_ServerPort::kProtocolFieldNumber;
const int FunRedirectMessage_ServerPort::kEncodingFieldNumber;
#endif  // !_MSC_VER

FunRedirectMessage_ServerPort::FunRedirectMessage_ServerPort()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FunRedirectMessage.ServerPort)
}

void FunRedirectMessage_ServerPort::InitAsDefaultInstance() {
}

FunRedirectMessage_ServerPort::FunRedirectMessage_ServerPort(const FunRedirectMessage_ServerPort& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FunRedirectMessage.ServerPort)
}

void FunRedirectMessage_ServerPort::SharedCtor() {
  _cached_size_ = 0;
  port_ = 0;
  protocol_ = 1;
  encoding_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FunRedirectMessage_ServerPort::~FunRedirectMessage_ServerPort() {
  // @@protoc_insertion_point(destructor:FunRedirectMessage.ServerPort)
  SharedDtor();
}

void FunRedirectMessage_ServerPort::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FunRedirectMessage_ServerPort::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FunRedirectMessage_ServerPort::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FunRedirectMessage_ServerPort_descriptor_;
}

const FunRedirectMessage_ServerPort& FunRedirectMessage_ServerPort::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_funapi_2fservice_2fredirect_5fmessage_2eproto();
  return *default_instance_;
}

FunRedirectMessage_ServerPort* FunRedirectMessage_ServerPort::default_instance_ = NULL;

FunRedirectMessage_ServerPort* FunRedirectMessage_ServerPort::New() const {
  return new FunRedirectMessage_ServerPort;
}

void FunRedirectMessage_ServerPort::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    port_ = 0;
    protocol_ = 1;
    encoding_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FunRedirectMessage_ServerPort::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FunRedirectMessage.ServerPort)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 port = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_protocol;
        break;
      }

      // required .FunRedirectMessage.Protocol protocol = 2;
      case 2: {
        if (tag == 16) {
         parse_protocol:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::FunRedirectMessage_Protocol_IsValid(value)) {
            set_protocol(static_cast< ::FunRedirectMessage_Protocol >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_encoding;
        break;
      }

      // required .FunRedirectMessage.Encoding encoding = 3;
      case 3: {
        if (tag == 24) {
         parse_encoding:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::FunRedirectMessage_Encoding_IsValid(value)) {
            set_encoding(static_cast< ::FunRedirectMessage_Encoding >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FunRedirectMessage.ServerPort)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FunRedirectMessage.ServerPort)
  return false;
#undef DO_
}

void FunRedirectMessage_ServerPort::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FunRedirectMessage.ServerPort)
  // required int32 port = 1;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->port(), output);
  }

  // required .FunRedirectMessage.Protocol protocol = 2;
  if (has_protocol()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->protocol(), output);
  }

  // required .FunRedirectMessage.Encoding encoding = 3;
  if (has_encoding()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->encoding(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FunRedirectMessage.ServerPort)
}

::google::protobuf::uint8* FunRedirectMessage_ServerPort::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FunRedirectMessage.ServerPort)
  // required int32 port = 1;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->port(), target);
  }

  // required .FunRedirectMessage.Protocol protocol = 2;
  if (has_protocol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->protocol(), target);
  }

  // required .FunRedirectMessage.Encoding encoding = 3;
  if (has_encoding()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->encoding(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FunRedirectMessage.ServerPort)
  return target;
}

int FunRedirectMessage_ServerPort::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 port = 1;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // required .FunRedirectMessage.Protocol protocol = 2;
    if (has_protocol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protocol());
    }

    // required .FunRedirectMessage.Encoding encoding = 3;
    if (has_encoding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->encoding());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FunRedirectMessage_ServerPort::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FunRedirectMessage_ServerPort* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FunRedirectMessage_ServerPort*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FunRedirectMessage_ServerPort::MergeFrom(const FunRedirectMessage_ServerPort& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_protocol()) {
      set_protocol(from.protocol());
    }
    if (from.has_encoding()) {
      set_encoding(from.encoding());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FunRedirectMessage_ServerPort::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunRedirectMessage_ServerPort::CopyFrom(const FunRedirectMessage_ServerPort& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunRedirectMessage_ServerPort::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void FunRedirectMessage_ServerPort::Swap(FunRedirectMessage_ServerPort* other) {
  if (other != this) {
    std::swap(port_, other->port_);
    std::swap(protocol_, other->protocol_);
    std::swap(encoding_, other->encoding_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FunRedirectMessage_ServerPort::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FunRedirectMessage_ServerPort_descriptor_;
  metadata.reflection = FunRedirectMessage_ServerPort_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FunRedirectMessage::kHostFieldNumber;
const int FunRedirectMessage::kPortsFieldNumber;
const int FunRedirectMessage::kTokenFieldNumber;
const int FunRedirectMessage::kFlavorFieldNumber;
#endif  // !_MSC_VER

FunRedirectMessage::FunRedirectMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FunRedirectMessage)
}

void FunRedirectMessage::InitAsDefaultInstance() {
}

FunRedirectMessage::FunRedirectMessage(const FunRedirectMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FunRedirectMessage)
}

void FunRedirectMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  host_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flavor_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FunRedirectMessage::~FunRedirectMessage() {
  // @@protoc_insertion_point(destructor:FunRedirectMessage)
  SharedDtor();
}

void FunRedirectMessage::SharedDtor() {
  if (host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete host_;
  }
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (flavor_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete flavor_;
  }
  if (this != default_instance_) {
  }
}

void FunRedirectMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FunRedirectMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FunRedirectMessage_descriptor_;
}

const FunRedirectMessage& FunRedirectMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_funapi_2fservice_2fredirect_5fmessage_2eproto();
  return *default_instance_;
}

FunRedirectMessage* FunRedirectMessage::default_instance_ = NULL;

FunRedirectMessage* FunRedirectMessage::New() const {
  return new FunRedirectMessage;
}

void FunRedirectMessage::Clear() {
  if (_has_bits_[0 / 32] & 13) {
    if (has_host()) {
      if (host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        host_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
    if (has_flavor()) {
      if (flavor_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        flavor_->clear();
      }
    }
  }
  ports_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FunRedirectMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FunRedirectMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string host = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "host");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ports;
        break;
      }

      // repeated .FunRedirectMessage.ServerPort ports = 2;
      case 2: {
        if (tag == 18) {
         parse_ports:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ports()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ports;
        if (input->ExpectTag(26)) goto parse_token;
        break;
      }

      // required string token = 3;
      case 3: {
        if (tag == 26) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_flavor;
        break;
      }

      // required string flavor = 4;
      case 4: {
        if (tag == 34) {
         parse_flavor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_flavor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->flavor().data(), this->flavor().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "flavor");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FunRedirectMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FunRedirectMessage)
  return false;
#undef DO_
}

void FunRedirectMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FunRedirectMessage)
  // required string host = 1;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->host(), output);
  }

  // repeated .FunRedirectMessage.ServerPort ports = 2;
  for (int i = 0; i < this->ports_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ports(i), output);
  }

  // required string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->token(), output);
  }

  // required string flavor = 4;
  if (has_flavor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->flavor().data(), this->flavor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "flavor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->flavor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FunRedirectMessage)
}

::google::protobuf::uint8* FunRedirectMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FunRedirectMessage)
  // required string host = 1;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }

  // repeated .FunRedirectMessage.ServerPort ports = 2;
  for (int i = 0; i < this->ports_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ports(i), target);
  }

  // required string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->token(), target);
  }

  // required string flavor = 4;
  if (has_flavor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->flavor().data(), this->flavor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "flavor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->flavor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FunRedirectMessage)
  return target;
}

int FunRedirectMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string host = 1;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }

    // required string token = 3;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // required string flavor = 4;
    if (has_flavor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->flavor());
    }

  }
  // repeated .FunRedirectMessage.ServerPort ports = 2;
  total_size += 1 * this->ports_size();
  for (int i = 0; i < this->ports_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ports(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FunRedirectMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FunRedirectMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FunRedirectMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FunRedirectMessage::MergeFrom(const FunRedirectMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  ports_.MergeFrom(from.ports_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_flavor()) {
      set_flavor(from.flavor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FunRedirectMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunRedirectMessage::CopyFrom(const FunRedirectMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunRedirectMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->ports())) return false;
  return true;
}

void FunRedirectMessage::Swap(FunRedirectMessage* other) {
  if (other != this) {
    std::swap(host_, other->host_);
    ports_.Swap(&other->ports_);
    std::swap(token_, other->token_);
    std::swap(flavor_, other->flavor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FunRedirectMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FunRedirectMessage_descriptor_;
  metadata.reflection = FunRedirectMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* FunRedirectConnectMessage_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FunRedirectConnectMessage_Result_descriptor_;
}
bool FunRedirectConnectMessage_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FunRedirectConnectMessage_Result FunRedirectConnectMessage::OK;
const FunRedirectConnectMessage_Result FunRedirectConnectMessage::INVALID_TOKEN;
const FunRedirectConnectMessage_Result FunRedirectConnectMessage::EXPIRED;
const FunRedirectConnectMessage_Result FunRedirectConnectMessage::AUTH_FAILED;
const FunRedirectConnectMessage_Result FunRedirectConnectMessage::Result_MIN;
const FunRedirectConnectMessage_Result FunRedirectConnectMessage::Result_MAX;
const int FunRedirectConnectMessage::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int FunRedirectConnectMessage::kTokenFieldNumber;
const int FunRedirectConnectMessage::kResultFieldNumber;
#endif  // !_MSC_VER

FunRedirectConnectMessage::FunRedirectConnectMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FunRedirectConnectMessage)
}

void FunRedirectConnectMessage::InitAsDefaultInstance() {
}

FunRedirectConnectMessage::FunRedirectConnectMessage(const FunRedirectConnectMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FunRedirectConnectMessage)
}

void FunRedirectConnectMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FunRedirectConnectMessage::~FunRedirectConnectMessage() {
  // @@protoc_insertion_point(destructor:FunRedirectConnectMessage)
  SharedDtor();
}

void FunRedirectConnectMessage::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void FunRedirectConnectMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FunRedirectConnectMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FunRedirectConnectMessage_descriptor_;
}

const FunRedirectConnectMessage& FunRedirectConnectMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_funapi_2fservice_2fredirect_5fmessage_2eproto();
  return *default_instance_;
}

FunRedirectConnectMessage* FunRedirectConnectMessage::default_instance_ = NULL;

FunRedirectConnectMessage* FunRedirectConnectMessage::New() const {
  return new FunRedirectConnectMessage;
}

void FunRedirectConnectMessage::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FunRedirectConnectMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FunRedirectConnectMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .FunRedirectConnectMessage.Result result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::FunRedirectConnectMessage_Result_IsValid(value)) {
            set_result(static_cast< ::FunRedirectConnectMessage_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FunRedirectConnectMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FunRedirectConnectMessage)
  return false;
#undef DO_
}

void FunRedirectConnectMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FunRedirectConnectMessage)
  // optional string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  // optional .FunRedirectConnectMessage.Result result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FunRedirectConnectMessage)
}

::google::protobuf::uint8* FunRedirectConnectMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FunRedirectConnectMessage)
  // optional string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  // optional .FunRedirectConnectMessage.Result result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FunRedirectConnectMessage)
  return target;
}

int FunRedirectConnectMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string token = 1;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional .FunRedirectConnectMessage.Result result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FunRedirectConnectMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FunRedirectConnectMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FunRedirectConnectMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FunRedirectConnectMessage::MergeFrom(const FunRedirectConnectMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FunRedirectConnectMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunRedirectConnectMessage::CopyFrom(const FunRedirectConnectMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunRedirectConnectMessage::IsInitialized() const {

  return true;
}

void FunRedirectConnectMessage::Swap(FunRedirectConnectMessage* other) {
  if (other != this) {
    std::swap(token_, other->token_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FunRedirectConnectMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FunRedirectConnectMessage_descriptor_;
  metadata.reflection = FunRedirectConnectMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FunDedicatedServerRedirectMessage::kHostFieldNumber;
const int FunDedicatedServerRedirectMessage::kPortFieldNumber;
const int FunDedicatedServerRedirectMessage::kTokenFieldNumber;
#endif  // !_MSC_VER

FunDedicatedServerRedirectMessage::FunDedicatedServerRedirectMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FunDedicatedServerRedirectMessage)
}

void FunDedicatedServerRedirectMessage::InitAsDefaultInstance() {
}

FunDedicatedServerRedirectMessage::FunDedicatedServerRedirectMessage(const FunDedicatedServerRedirectMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FunDedicatedServerRedirectMessage)
}

void FunDedicatedServerRedirectMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  host_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FunDedicatedServerRedirectMessage::~FunDedicatedServerRedirectMessage() {
  // @@protoc_insertion_point(destructor:FunDedicatedServerRedirectMessage)
  SharedDtor();
}

void FunDedicatedServerRedirectMessage::SharedDtor() {
  if (host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete host_;
  }
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void FunDedicatedServerRedirectMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FunDedicatedServerRedirectMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FunDedicatedServerRedirectMessage_descriptor_;
}

const FunDedicatedServerRedirectMessage& FunDedicatedServerRedirectMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_funapi_2fservice_2fredirect_5fmessage_2eproto();
  return *default_instance_;
}

FunDedicatedServerRedirectMessage* FunDedicatedServerRedirectMessage::default_instance_ = NULL;

FunDedicatedServerRedirectMessage* FunDedicatedServerRedirectMessage::New() const {
  return new FunDedicatedServerRedirectMessage;
}

void FunDedicatedServerRedirectMessage::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_host()) {
      if (host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        host_->clear();
      }
    }
    port_ = 0;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FunDedicatedServerRedirectMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FunDedicatedServerRedirectMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string host = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "host");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // required int32 port = 2;
      case 2: {
        if (tag == 16) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_token;
        break;
      }

      // required string token = 3;
      case 3: {
        if (tag == 26) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FunDedicatedServerRedirectMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FunDedicatedServerRedirectMessage)
  return false;
#undef DO_
}

void FunDedicatedServerRedirectMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FunDedicatedServerRedirectMessage)
  // required string host = 1;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->host(), output);
  }

  // required int32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  // required string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FunDedicatedServerRedirectMessage)
}

::google::protobuf::uint8* FunDedicatedServerRedirectMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FunDedicatedServerRedirectMessage)
  // required string host = 1;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }

  // required int32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  // required string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FunDedicatedServerRedirectMessage)
  return target;
}

int FunDedicatedServerRedirectMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string host = 1;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }

    // required int32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // required string token = 3;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FunDedicatedServerRedirectMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FunDedicatedServerRedirectMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FunDedicatedServerRedirectMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FunDedicatedServerRedirectMessage::MergeFrom(const FunDedicatedServerRedirectMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FunDedicatedServerRedirectMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunDedicatedServerRedirectMessage::CopyFrom(const FunDedicatedServerRedirectMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunDedicatedServerRedirectMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void FunDedicatedServerRedirectMessage::Swap(FunDedicatedServerRedirectMessage* other) {
  if (other != this) {
    std::swap(host_, other->host_);
    std::swap(port_, other->port_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FunDedicatedServerRedirectMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FunDedicatedServerRedirectMessage_descriptor_;
  metadata.reflection = FunDedicatedServerRedirectMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FunDedicatedServerMesseage::kRedirectFieldNumber;
#endif  // !_MSC_VER

FunDedicatedServerMesseage::FunDedicatedServerMesseage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FunDedicatedServerMesseage)
}

void FunDedicatedServerMesseage::InitAsDefaultInstance() {
  redirect_ = const_cast< ::FunDedicatedServerRedirectMessage*>(&::FunDedicatedServerRedirectMessage::default_instance());
}

FunDedicatedServerMesseage::FunDedicatedServerMesseage(const FunDedicatedServerMesseage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FunDedicatedServerMesseage)
}

void FunDedicatedServerMesseage::SharedCtor() {
  _cached_size_ = 0;
  redirect_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FunDedicatedServerMesseage::~FunDedicatedServerMesseage() {
  // @@protoc_insertion_point(destructor:FunDedicatedServerMesseage)
  SharedDtor();
}

void FunDedicatedServerMesseage::SharedDtor() {
  if (this != default_instance_) {
    delete redirect_;
  }
}

void FunDedicatedServerMesseage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FunDedicatedServerMesseage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FunDedicatedServerMesseage_descriptor_;
}

const FunDedicatedServerMesseage& FunDedicatedServerMesseage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_funapi_2fservice_2fredirect_5fmessage_2eproto();
  return *default_instance_;
}

FunDedicatedServerMesseage* FunDedicatedServerMesseage::default_instance_ = NULL;

FunDedicatedServerMesseage* FunDedicatedServerMesseage::New() const {
  return new FunDedicatedServerMesseage;
}

void FunDedicatedServerMesseage::Clear() {
  if (has_redirect()) {
    if (redirect_ != NULL) redirect_->::FunDedicatedServerRedirectMessage::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FunDedicatedServerMesseage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FunDedicatedServerMesseage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .FunDedicatedServerRedirectMessage redirect = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_redirect()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FunDedicatedServerMesseage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FunDedicatedServerMesseage)
  return false;
#undef DO_
}

void FunDedicatedServerMesseage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FunDedicatedServerMesseage)
  // optional .FunDedicatedServerRedirectMessage redirect = 1;
  if (has_redirect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->redirect(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FunDedicatedServerMesseage)
}

::google::protobuf::uint8* FunDedicatedServerMesseage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FunDedicatedServerMesseage)
  // optional .FunDedicatedServerRedirectMessage redirect = 1;
  if (has_redirect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->redirect(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FunDedicatedServerMesseage)
  return target;
}

int FunDedicatedServerMesseage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FunDedicatedServerRedirectMessage redirect = 1;
    if (has_redirect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->redirect());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FunDedicatedServerMesseage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FunDedicatedServerMesseage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FunDedicatedServerMesseage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FunDedicatedServerMesseage::MergeFrom(const FunDedicatedServerMesseage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_redirect()) {
      mutable_redirect()->::FunDedicatedServerRedirectMessage::MergeFrom(from.redirect());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FunDedicatedServerMesseage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunDedicatedServerMesseage::CopyFrom(const FunDedicatedServerMesseage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunDedicatedServerMesseage::IsInitialized() const {

  if (has_redirect()) {
    if (!this->redirect().IsInitialized()) return false;
  }
  return true;
}

void FunDedicatedServerMesseage::Swap(FunDedicatedServerMesseage* other) {
  if (other != this) {
    std::swap(redirect_, other->redirect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FunDedicatedServerMesseage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FunDedicatedServerMesseage_descriptor_;
  metadata.reflection = FunDedicatedServerMesseage_reflection_;
  return metadata;
}

::google::protobuf::internal::ExtensionIdentifier< ::FunMessage,
    ::google::protobuf::internal::MessageTypeTraits< ::FunRedirectMessage >, 11, false >
  _sc_redirect(kScRedirectFieldNumber, ::FunRedirectMessage::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::FunMessage,
    ::google::protobuf::internal::MessageTypeTraits< ::FunRedirectConnectMessage >, 11, false >
  _cs_redirect_connect(kCsRedirectConnectFieldNumber, ::FunRedirectConnectMessage::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::FunMessage,
    ::google::protobuf::internal::MessageTypeTraits< ::FunDedicatedServerMesseage >, 11, false >
  _sc_dedicated_server(kScDedicatedServerFieldNumber, ::FunDedicatedServerMesseage::default_instance());

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
