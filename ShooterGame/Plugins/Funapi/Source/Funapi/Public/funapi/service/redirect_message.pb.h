// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: funapi/service/redirect_message.proto

#ifndef PROTOBUF_funapi_2fservice_2fredirect_5fmessage_2eproto__INCLUDED
#define PROTOBUF_funapi_2fservice_2fredirect_5fmessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "funapi/network/fun_message.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void FUNAPI_API protobuf_AddDesc_funapi_2fservice_2fredirect_5fmessage_2eproto();
void protobuf_AssignDesc_funapi_2fservice_2fredirect_5fmessage_2eproto();
void protobuf_ShutdownFile_funapi_2fservice_2fredirect_5fmessage_2eproto();

class FunRedirectMessage;
class FunRedirectMessage_ServerPort;
class FunRedirectConnectMessage;
class FunDedicatedServerRedirectMessage;
class FunDedicatedServerMesseage;

enum FunRedirectMessage_Protocol {
  FunRedirectMessage_Protocol_PROTO_TCP = 1,
  FunRedirectMessage_Protocol_PROTO_UDP = 2,
  FunRedirectMessage_Protocol_PROTO_HTTP = 3
};
FUNAPI_API bool FunRedirectMessage_Protocol_IsValid(int value);
const FunRedirectMessage_Protocol FunRedirectMessage_Protocol_Protocol_MIN = FunRedirectMessage_Protocol_PROTO_TCP;
const FunRedirectMessage_Protocol FunRedirectMessage_Protocol_Protocol_MAX = FunRedirectMessage_Protocol_PROTO_HTTP;
const int FunRedirectMessage_Protocol_Protocol_ARRAYSIZE = FunRedirectMessage_Protocol_Protocol_MAX + 1;

FUNAPI_API const ::google::protobuf::EnumDescriptor* FunRedirectMessage_Protocol_descriptor();
inline const ::std::string& FunRedirectMessage_Protocol_Name(FunRedirectMessage_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    FunRedirectMessage_Protocol_descriptor(), value);
}
inline bool FunRedirectMessage_Protocol_Parse(
    const ::std::string& name, FunRedirectMessage_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FunRedirectMessage_Protocol>(
    FunRedirectMessage_Protocol_descriptor(), name, value);
}
enum FunRedirectMessage_Encoding {
  FunRedirectMessage_Encoding_ENCODING_JSON = 1,
  FunRedirectMessage_Encoding_ENCODING_PROTOBUF = 2
};
FUNAPI_API bool FunRedirectMessage_Encoding_IsValid(int value);
const FunRedirectMessage_Encoding FunRedirectMessage_Encoding_Encoding_MIN = FunRedirectMessage_Encoding_ENCODING_JSON;
const FunRedirectMessage_Encoding FunRedirectMessage_Encoding_Encoding_MAX = FunRedirectMessage_Encoding_ENCODING_PROTOBUF;
const int FunRedirectMessage_Encoding_Encoding_ARRAYSIZE = FunRedirectMessage_Encoding_Encoding_MAX + 1;

FUNAPI_API const ::google::protobuf::EnumDescriptor* FunRedirectMessage_Encoding_descriptor();
inline const ::std::string& FunRedirectMessage_Encoding_Name(FunRedirectMessage_Encoding value) {
  return ::google::protobuf::internal::NameOfEnum(
    FunRedirectMessage_Encoding_descriptor(), value);
}
inline bool FunRedirectMessage_Encoding_Parse(
    const ::std::string& name, FunRedirectMessage_Encoding* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FunRedirectMessage_Encoding>(
    FunRedirectMessage_Encoding_descriptor(), name, value);
}
enum FunRedirectConnectMessage_Result {
  FunRedirectConnectMessage_Result_OK = 0,
  FunRedirectConnectMessage_Result_INVALID_TOKEN = 1,
  FunRedirectConnectMessage_Result_EXPIRED = 2,
  FunRedirectConnectMessage_Result_AUTH_FAILED = 3
};
FUNAPI_API bool FunRedirectConnectMessage_Result_IsValid(int value);
const FunRedirectConnectMessage_Result FunRedirectConnectMessage_Result_Result_MIN = FunRedirectConnectMessage_Result_OK;
const FunRedirectConnectMessage_Result FunRedirectConnectMessage_Result_Result_MAX = FunRedirectConnectMessage_Result_AUTH_FAILED;
const int FunRedirectConnectMessage_Result_Result_ARRAYSIZE = FunRedirectConnectMessage_Result_Result_MAX + 1;

FUNAPI_API const ::google::protobuf::EnumDescriptor* FunRedirectConnectMessage_Result_descriptor();
inline const ::std::string& FunRedirectConnectMessage_Result_Name(FunRedirectConnectMessage_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    FunRedirectConnectMessage_Result_descriptor(), value);
}
inline bool FunRedirectConnectMessage_Result_Parse(
    const ::std::string& name, FunRedirectConnectMessage_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FunRedirectConnectMessage_Result>(
    FunRedirectConnectMessage_Result_descriptor(), name, value);
}
// ===================================================================

class FUNAPI_API FunRedirectMessage_ServerPort : public ::google::protobuf::Message {
 public:
  FunRedirectMessage_ServerPort();
  virtual ~FunRedirectMessage_ServerPort();

  FunRedirectMessage_ServerPort(const FunRedirectMessage_ServerPort& from);

  inline FunRedirectMessage_ServerPort& operator=(const FunRedirectMessage_ServerPort& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FunRedirectMessage_ServerPort& default_instance();

  void Swap(FunRedirectMessage_ServerPort* other);

  // implements Message ----------------------------------------------

  FunRedirectMessage_ServerPort* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FunRedirectMessage_ServerPort& from);
  void MergeFrom(const FunRedirectMessage_ServerPort& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 port = 1;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 1;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // required .FunRedirectMessage.Protocol protocol = 2;
  inline bool has_protocol() const;
  inline void clear_protocol();
  static const int kProtocolFieldNumber = 2;
  inline ::FunRedirectMessage_Protocol protocol() const;
  inline void set_protocol(::FunRedirectMessage_Protocol value);

  // required .FunRedirectMessage.Encoding encoding = 3;
  inline bool has_encoding() const;
  inline void clear_encoding();
  static const int kEncodingFieldNumber = 3;
  inline ::FunRedirectMessage_Encoding encoding() const;
  inline void set_encoding(::FunRedirectMessage_Encoding value);

  // @@protoc_insertion_point(class_scope:FunRedirectMessage.ServerPort)
 private:
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_protocol();
  inline void clear_has_protocol();
  inline void set_has_encoding();
  inline void clear_has_encoding();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 port_;
  int protocol_;
  int encoding_;
  friend void FUNAPI_API protobuf_AddDesc_funapi_2fservice_2fredirect_5fmessage_2eproto();
  friend void protobuf_AssignDesc_funapi_2fservice_2fredirect_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_funapi_2fservice_2fredirect_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static FunRedirectMessage_ServerPort* default_instance_;
};
// -------------------------------------------------------------------

class FUNAPI_API FunRedirectMessage : public ::google::protobuf::Message {
 public:
  FunRedirectMessage();
  virtual ~FunRedirectMessage();

  FunRedirectMessage(const FunRedirectMessage& from);

  inline FunRedirectMessage& operator=(const FunRedirectMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FunRedirectMessage& default_instance();

  void Swap(FunRedirectMessage* other);

  // implements Message ----------------------------------------------

  FunRedirectMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FunRedirectMessage& from);
  void MergeFrom(const FunRedirectMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FunRedirectMessage_ServerPort ServerPort;

  typedef FunRedirectMessage_Protocol Protocol;
  static const Protocol PROTO_TCP = FunRedirectMessage_Protocol_PROTO_TCP;
  static const Protocol PROTO_UDP = FunRedirectMessage_Protocol_PROTO_UDP;
  static const Protocol PROTO_HTTP = FunRedirectMessage_Protocol_PROTO_HTTP;
  static inline bool Protocol_IsValid(int value) {
    return FunRedirectMessage_Protocol_IsValid(value);
  }
  static const Protocol Protocol_MIN =
    FunRedirectMessage_Protocol_Protocol_MIN;
  static const Protocol Protocol_MAX =
    FunRedirectMessage_Protocol_Protocol_MAX;
  static const int Protocol_ARRAYSIZE =
    FunRedirectMessage_Protocol_Protocol_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Protocol_descriptor() {
    return FunRedirectMessage_Protocol_descriptor();
  }
  static inline const ::std::string& Protocol_Name(Protocol value) {
    return FunRedirectMessage_Protocol_Name(value);
  }
  static inline bool Protocol_Parse(const ::std::string& name,
      Protocol* value) {
    return FunRedirectMessage_Protocol_Parse(name, value);
  }

  typedef FunRedirectMessage_Encoding Encoding;
  static const Encoding ENCODING_JSON = FunRedirectMessage_Encoding_ENCODING_JSON;
  static const Encoding ENCODING_PROTOBUF = FunRedirectMessage_Encoding_ENCODING_PROTOBUF;
  static inline bool Encoding_IsValid(int value) {
    return FunRedirectMessage_Encoding_IsValid(value);
  }
  static const Encoding Encoding_MIN =
    FunRedirectMessage_Encoding_Encoding_MIN;
  static const Encoding Encoding_MAX =
    FunRedirectMessage_Encoding_Encoding_MAX;
  static const int Encoding_ARRAYSIZE =
    FunRedirectMessage_Encoding_Encoding_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Encoding_descriptor() {
    return FunRedirectMessage_Encoding_descriptor();
  }
  static inline const ::std::string& Encoding_Name(Encoding value) {
    return FunRedirectMessage_Encoding_Name(value);
  }
  static inline bool Encoding_Parse(const ::std::string& name,
      Encoding* value) {
    return FunRedirectMessage_Encoding_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string host = 1;
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 1;
  inline const ::std::string& host() const;
  inline void set_host(const ::std::string& value);
  inline void set_host(const char* value);
  inline void set_host(const char* value, size_t size);
  inline ::std::string* mutable_host();
  inline ::std::string* release_host();
  inline void set_allocated_host(::std::string* host);

  // repeated .FunRedirectMessage.ServerPort ports = 2;
  inline int ports_size() const;
  inline void clear_ports();
  static const int kPortsFieldNumber = 2;
  inline const ::FunRedirectMessage_ServerPort& ports(int index) const;
  inline ::FunRedirectMessage_ServerPort* mutable_ports(int index);
  inline ::FunRedirectMessage_ServerPort* add_ports();
  inline const ::google::protobuf::RepeatedPtrField< ::FunRedirectMessage_ServerPort >&
      ports() const;
  inline ::google::protobuf::RepeatedPtrField< ::FunRedirectMessage_ServerPort >*
      mutable_ports();

  // required string token = 3;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 3;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // required string flavor = 4;
  inline bool has_flavor() const;
  inline void clear_flavor();
  static const int kFlavorFieldNumber = 4;
  inline const ::std::string& flavor() const;
  inline void set_flavor(const ::std::string& value);
  inline void set_flavor(const char* value);
  inline void set_flavor(const char* value, size_t size);
  inline ::std::string* mutable_flavor();
  inline ::std::string* release_flavor();
  inline void set_allocated_flavor(::std::string* flavor);

  // @@protoc_insertion_point(class_scope:FunRedirectMessage)
 private:
  inline void set_has_host();
  inline void clear_has_host();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_flavor();
  inline void clear_has_flavor();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* host_;
  ::google::protobuf::RepeatedPtrField< ::FunRedirectMessage_ServerPort > ports_;
  ::std::string* token_;
  ::std::string* flavor_;
  friend void FUNAPI_API protobuf_AddDesc_funapi_2fservice_2fredirect_5fmessage_2eproto();
  friend void protobuf_AssignDesc_funapi_2fservice_2fredirect_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_funapi_2fservice_2fredirect_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static FunRedirectMessage* default_instance_;
};
// -------------------------------------------------------------------

class FUNAPI_API FunRedirectConnectMessage : public ::google::protobuf::Message {
 public:
  FunRedirectConnectMessage();
  virtual ~FunRedirectConnectMessage();

  FunRedirectConnectMessage(const FunRedirectConnectMessage& from);

  inline FunRedirectConnectMessage& operator=(const FunRedirectConnectMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FunRedirectConnectMessage& default_instance();

  void Swap(FunRedirectConnectMessage* other);

  // implements Message ----------------------------------------------

  FunRedirectConnectMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FunRedirectConnectMessage& from);
  void MergeFrom(const FunRedirectConnectMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FunRedirectConnectMessage_Result Result;
  static const Result OK = FunRedirectConnectMessage_Result_OK;
  static const Result INVALID_TOKEN = FunRedirectConnectMessage_Result_INVALID_TOKEN;
  static const Result EXPIRED = FunRedirectConnectMessage_Result_EXPIRED;
  static const Result AUTH_FAILED = FunRedirectConnectMessage_Result_AUTH_FAILED;
  static inline bool Result_IsValid(int value) {
    return FunRedirectConnectMessage_Result_IsValid(value);
  }
  static const Result Result_MIN =
    FunRedirectConnectMessage_Result_Result_MIN;
  static const Result Result_MAX =
    FunRedirectConnectMessage_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    FunRedirectConnectMessage_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return FunRedirectConnectMessage_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return FunRedirectConnectMessage_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return FunRedirectConnectMessage_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string token = 1;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 1;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // optional .FunRedirectConnectMessage.Result result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::FunRedirectConnectMessage_Result result() const;
  inline void set_result(::FunRedirectConnectMessage_Result value);

  // @@protoc_insertion_point(class_scope:FunRedirectConnectMessage)
 private:
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* token_;
  int result_;
  friend void FUNAPI_API protobuf_AddDesc_funapi_2fservice_2fredirect_5fmessage_2eproto();
  friend void protobuf_AssignDesc_funapi_2fservice_2fredirect_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_funapi_2fservice_2fredirect_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static FunRedirectConnectMessage* default_instance_;
};
// -------------------------------------------------------------------

class FUNAPI_API FunDedicatedServerRedirectMessage : public ::google::protobuf::Message {
 public:
  FunDedicatedServerRedirectMessage();
  virtual ~FunDedicatedServerRedirectMessage();

  FunDedicatedServerRedirectMessage(const FunDedicatedServerRedirectMessage& from);

  inline FunDedicatedServerRedirectMessage& operator=(const FunDedicatedServerRedirectMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FunDedicatedServerRedirectMessage& default_instance();

  void Swap(FunDedicatedServerRedirectMessage* other);

  // implements Message ----------------------------------------------

  FunDedicatedServerRedirectMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FunDedicatedServerRedirectMessage& from);
  void MergeFrom(const FunDedicatedServerRedirectMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string host = 1;
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 1;
  inline const ::std::string& host() const;
  inline void set_host(const ::std::string& value);
  inline void set_host(const char* value);
  inline void set_host(const char* value, size_t size);
  inline ::std::string* mutable_host();
  inline ::std::string* release_host();
  inline void set_allocated_host(::std::string* host);

  // required int32 port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // required string token = 3;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 3;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:FunDedicatedServerRedirectMessage)
 private:
  inline void set_has_host();
  inline void clear_has_host();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_token();
  inline void clear_has_token();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* host_;
  ::std::string* token_;
  ::google::protobuf::int32 port_;
  friend void FUNAPI_API protobuf_AddDesc_funapi_2fservice_2fredirect_5fmessage_2eproto();
  friend void protobuf_AssignDesc_funapi_2fservice_2fredirect_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_funapi_2fservice_2fredirect_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static FunDedicatedServerRedirectMessage* default_instance_;
};
// -------------------------------------------------------------------

class FUNAPI_API FunDedicatedServerMesseage : public ::google::protobuf::Message {
 public:
  FunDedicatedServerMesseage();
  virtual ~FunDedicatedServerMesseage();

  FunDedicatedServerMesseage(const FunDedicatedServerMesseage& from);

  inline FunDedicatedServerMesseage& operator=(const FunDedicatedServerMesseage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FunDedicatedServerMesseage& default_instance();

  void Swap(FunDedicatedServerMesseage* other);

  // implements Message ----------------------------------------------

  FunDedicatedServerMesseage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FunDedicatedServerMesseage& from);
  void MergeFrom(const FunDedicatedServerMesseage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .FunDedicatedServerRedirectMessage redirect = 1;
  inline bool has_redirect() const;
  inline void clear_redirect();
  static const int kRedirectFieldNumber = 1;
  inline const ::FunDedicatedServerRedirectMessage& redirect() const;
  inline ::FunDedicatedServerRedirectMessage* mutable_redirect();
  inline ::FunDedicatedServerRedirectMessage* release_redirect();
  inline void set_allocated_redirect(::FunDedicatedServerRedirectMessage* redirect);

  // @@protoc_insertion_point(class_scope:FunDedicatedServerMesseage)
 private:
  inline void set_has_redirect();
  inline void clear_has_redirect();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::FunDedicatedServerRedirectMessage* redirect_;
  friend void FUNAPI_API protobuf_AddDesc_funapi_2fservice_2fredirect_5fmessage_2eproto();
  friend void protobuf_AssignDesc_funapi_2fservice_2fredirect_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_funapi_2fservice_2fredirect_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static FunDedicatedServerMesseage* default_instance_;
};
// ===================================================================

static const int kScRedirectFieldNumber = 10;
FUNAPI_API extern ::google::protobuf::internal::ExtensionIdentifier< ::FunMessage,
    ::google::protobuf::internal::MessageTypeTraits< ::FunRedirectMessage >, 11, false >
  _sc_redirect;
static const int kCsRedirectConnectFieldNumber = 11;
FUNAPI_API extern ::google::protobuf::internal::ExtensionIdentifier< ::FunMessage,
    ::google::protobuf::internal::MessageTypeTraits< ::FunRedirectConnectMessage >, 11, false >
  _cs_redirect_connect;
static const int kScDedicatedServerFieldNumber = 12;
FUNAPI_API extern ::google::protobuf::internal::ExtensionIdentifier< ::FunMessage,
    ::google::protobuf::internal::MessageTypeTraits< ::FunDedicatedServerMesseage >, 11, false >
  _sc_dedicated_server;

// ===================================================================

// FunRedirectMessage_ServerPort

// required int32 port = 1;
inline bool FunRedirectMessage_ServerPort::has_port() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FunRedirectMessage_ServerPort::set_has_port() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FunRedirectMessage_ServerPort::clear_has_port() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FunRedirectMessage_ServerPort::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 FunRedirectMessage_ServerPort::port() const {
  // @@protoc_insertion_point(field_get:FunRedirectMessage.ServerPort.port)
  return port_;
}
inline void FunRedirectMessage_ServerPort::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:FunRedirectMessage.ServerPort.port)
}

// required .FunRedirectMessage.Protocol protocol = 2;
inline bool FunRedirectMessage_ServerPort::has_protocol() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FunRedirectMessage_ServerPort::set_has_protocol() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FunRedirectMessage_ServerPort::clear_has_protocol() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FunRedirectMessage_ServerPort::clear_protocol() {
  protocol_ = 1;
  clear_has_protocol();
}
inline ::FunRedirectMessage_Protocol FunRedirectMessage_ServerPort::protocol() const {
  // @@protoc_insertion_point(field_get:FunRedirectMessage.ServerPort.protocol)
  return static_cast< ::FunRedirectMessage_Protocol >(protocol_);
}
inline void FunRedirectMessage_ServerPort::set_protocol(::FunRedirectMessage_Protocol value) {
  assert(::FunRedirectMessage_Protocol_IsValid(value));
  set_has_protocol();
  protocol_ = value;
  // @@protoc_insertion_point(field_set:FunRedirectMessage.ServerPort.protocol)
}

// required .FunRedirectMessage.Encoding encoding = 3;
inline bool FunRedirectMessage_ServerPort::has_encoding() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FunRedirectMessage_ServerPort::set_has_encoding() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FunRedirectMessage_ServerPort::clear_has_encoding() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FunRedirectMessage_ServerPort::clear_encoding() {
  encoding_ = 1;
  clear_has_encoding();
}
inline ::FunRedirectMessage_Encoding FunRedirectMessage_ServerPort::encoding() const {
  // @@protoc_insertion_point(field_get:FunRedirectMessage.ServerPort.encoding)
  return static_cast< ::FunRedirectMessage_Encoding >(encoding_);
}
inline void FunRedirectMessage_ServerPort::set_encoding(::FunRedirectMessage_Encoding value) {
  assert(::FunRedirectMessage_Encoding_IsValid(value));
  set_has_encoding();
  encoding_ = value;
  // @@protoc_insertion_point(field_set:FunRedirectMessage.ServerPort.encoding)
}

// -------------------------------------------------------------------

// FunRedirectMessage

// required string host = 1;
inline bool FunRedirectMessage::has_host() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FunRedirectMessage::set_has_host() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FunRedirectMessage::clear_has_host() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FunRedirectMessage::clear_host() {
  if (host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_->clear();
  }
  clear_has_host();
}
inline const ::std::string& FunRedirectMessage::host() const {
  // @@protoc_insertion_point(field_get:FunRedirectMessage.host)
  return *host_;
}
inline void FunRedirectMessage::set_host(const ::std::string& value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_ = new ::std::string;
  }
  host_->assign(value);
  // @@protoc_insertion_point(field_set:FunRedirectMessage.host)
}
inline void FunRedirectMessage::set_host(const char* value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_ = new ::std::string;
  }
  host_->assign(value);
  // @@protoc_insertion_point(field_set_char:FunRedirectMessage.host)
}
inline void FunRedirectMessage::set_host(const char* value, size_t size) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_ = new ::std::string;
  }
  host_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:FunRedirectMessage.host)
}
inline ::std::string* FunRedirectMessage::mutable_host() {
  set_has_host();
  if (host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:FunRedirectMessage.host)
  return host_;
}
inline ::std::string* FunRedirectMessage::release_host() {
  clear_has_host();
  if (host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = host_;
    host_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FunRedirectMessage::set_allocated_host(::std::string* host) {
  if (host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete host_;
  }
  if (host) {
    set_has_host();
    host_ = host;
  } else {
    clear_has_host();
    host_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:FunRedirectMessage.host)
}

// repeated .FunRedirectMessage.ServerPort ports = 2;
inline int FunRedirectMessage::ports_size() const {
  return ports_.size();
}
inline void FunRedirectMessage::clear_ports() {
  ports_.Clear();
}
inline const ::FunRedirectMessage_ServerPort& FunRedirectMessage::ports(int index) const {
  // @@protoc_insertion_point(field_get:FunRedirectMessage.ports)
  return ports_.Get(index);
}
inline ::FunRedirectMessage_ServerPort* FunRedirectMessage::mutable_ports(int index) {
  // @@protoc_insertion_point(field_mutable:FunRedirectMessage.ports)
  return ports_.Mutable(index);
}
inline ::FunRedirectMessage_ServerPort* FunRedirectMessage::add_ports() {
  // @@protoc_insertion_point(field_add:FunRedirectMessage.ports)
  return ports_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FunRedirectMessage_ServerPort >&
FunRedirectMessage::ports() const {
  // @@protoc_insertion_point(field_list:FunRedirectMessage.ports)
  return ports_;
}
inline ::google::protobuf::RepeatedPtrField< ::FunRedirectMessage_ServerPort >*
FunRedirectMessage::mutable_ports() {
  // @@protoc_insertion_point(field_mutable_list:FunRedirectMessage.ports)
  return &ports_;
}

// required string token = 3;
inline bool FunRedirectMessage::has_token() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FunRedirectMessage::set_has_token() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FunRedirectMessage::clear_has_token() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FunRedirectMessage::clear_token() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& FunRedirectMessage::token() const {
  // @@protoc_insertion_point(field_get:FunRedirectMessage.token)
  return *token_;
}
inline void FunRedirectMessage::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set:FunRedirectMessage.token)
}
inline void FunRedirectMessage::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set_char:FunRedirectMessage.token)
}
inline void FunRedirectMessage::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:FunRedirectMessage.token)
}
inline ::std::string* FunRedirectMessage::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:FunRedirectMessage.token)
  return token_;
}
inline ::std::string* FunRedirectMessage::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FunRedirectMessage::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:FunRedirectMessage.token)
}

// required string flavor = 4;
inline bool FunRedirectMessage::has_flavor() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FunRedirectMessage::set_has_flavor() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FunRedirectMessage::clear_has_flavor() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FunRedirectMessage::clear_flavor() {
  if (flavor_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    flavor_->clear();
  }
  clear_has_flavor();
}
inline const ::std::string& FunRedirectMessage::flavor() const {
  // @@protoc_insertion_point(field_get:FunRedirectMessage.flavor)
  return *flavor_;
}
inline void FunRedirectMessage::set_flavor(const ::std::string& value) {
  set_has_flavor();
  if (flavor_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    flavor_ = new ::std::string;
  }
  flavor_->assign(value);
  // @@protoc_insertion_point(field_set:FunRedirectMessage.flavor)
}
inline void FunRedirectMessage::set_flavor(const char* value) {
  set_has_flavor();
  if (flavor_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    flavor_ = new ::std::string;
  }
  flavor_->assign(value);
  // @@protoc_insertion_point(field_set_char:FunRedirectMessage.flavor)
}
inline void FunRedirectMessage::set_flavor(const char* value, size_t size) {
  set_has_flavor();
  if (flavor_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    flavor_ = new ::std::string;
  }
  flavor_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:FunRedirectMessage.flavor)
}
inline ::std::string* FunRedirectMessage::mutable_flavor() {
  set_has_flavor();
  if (flavor_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    flavor_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:FunRedirectMessage.flavor)
  return flavor_;
}
inline ::std::string* FunRedirectMessage::release_flavor() {
  clear_has_flavor();
  if (flavor_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = flavor_;
    flavor_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FunRedirectMessage::set_allocated_flavor(::std::string* flavor) {
  if (flavor_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete flavor_;
  }
  if (flavor) {
    set_has_flavor();
    flavor_ = flavor;
  } else {
    clear_has_flavor();
    flavor_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:FunRedirectMessage.flavor)
}

// -------------------------------------------------------------------

// FunRedirectConnectMessage

// optional string token = 1;
inline bool FunRedirectConnectMessage::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FunRedirectConnectMessage::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FunRedirectConnectMessage::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FunRedirectConnectMessage::clear_token() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& FunRedirectConnectMessage::token() const {
  // @@protoc_insertion_point(field_get:FunRedirectConnectMessage.token)
  return *token_;
}
inline void FunRedirectConnectMessage::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set:FunRedirectConnectMessage.token)
}
inline void FunRedirectConnectMessage::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set_char:FunRedirectConnectMessage.token)
}
inline void FunRedirectConnectMessage::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:FunRedirectConnectMessage.token)
}
inline ::std::string* FunRedirectConnectMessage::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:FunRedirectConnectMessage.token)
  return token_;
}
inline ::std::string* FunRedirectConnectMessage::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FunRedirectConnectMessage::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:FunRedirectConnectMessage.token)
}

// optional .FunRedirectConnectMessage.Result result = 2;
inline bool FunRedirectConnectMessage::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FunRedirectConnectMessage::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FunRedirectConnectMessage::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FunRedirectConnectMessage::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::FunRedirectConnectMessage_Result FunRedirectConnectMessage::result() const {
  // @@protoc_insertion_point(field_get:FunRedirectConnectMessage.result)
  return static_cast< ::FunRedirectConnectMessage_Result >(result_);
}
inline void FunRedirectConnectMessage::set_result(::FunRedirectConnectMessage_Result value) {
  assert(::FunRedirectConnectMessage_Result_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:FunRedirectConnectMessage.result)
}

// -------------------------------------------------------------------

// FunDedicatedServerRedirectMessage

// required string host = 1;
inline bool FunDedicatedServerRedirectMessage::has_host() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FunDedicatedServerRedirectMessage::set_has_host() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FunDedicatedServerRedirectMessage::clear_has_host() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FunDedicatedServerRedirectMessage::clear_host() {
  if (host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_->clear();
  }
  clear_has_host();
}
inline const ::std::string& FunDedicatedServerRedirectMessage::host() const {
  // @@protoc_insertion_point(field_get:FunDedicatedServerRedirectMessage.host)
  return *host_;
}
inline void FunDedicatedServerRedirectMessage::set_host(const ::std::string& value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_ = new ::std::string;
  }
  host_->assign(value);
  // @@protoc_insertion_point(field_set:FunDedicatedServerRedirectMessage.host)
}
inline void FunDedicatedServerRedirectMessage::set_host(const char* value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_ = new ::std::string;
  }
  host_->assign(value);
  // @@protoc_insertion_point(field_set_char:FunDedicatedServerRedirectMessage.host)
}
inline void FunDedicatedServerRedirectMessage::set_host(const char* value, size_t size) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_ = new ::std::string;
  }
  host_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:FunDedicatedServerRedirectMessage.host)
}
inline ::std::string* FunDedicatedServerRedirectMessage::mutable_host() {
  set_has_host();
  if (host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:FunDedicatedServerRedirectMessage.host)
  return host_;
}
inline ::std::string* FunDedicatedServerRedirectMessage::release_host() {
  clear_has_host();
  if (host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = host_;
    host_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FunDedicatedServerRedirectMessage::set_allocated_host(::std::string* host) {
  if (host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete host_;
  }
  if (host) {
    set_has_host();
    host_ = host;
  } else {
    clear_has_host();
    host_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:FunDedicatedServerRedirectMessage.host)
}

// required int32 port = 2;
inline bool FunDedicatedServerRedirectMessage::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FunDedicatedServerRedirectMessage::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FunDedicatedServerRedirectMessage::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FunDedicatedServerRedirectMessage::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 FunDedicatedServerRedirectMessage::port() const {
  // @@protoc_insertion_point(field_get:FunDedicatedServerRedirectMessage.port)
  return port_;
}
inline void FunDedicatedServerRedirectMessage::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:FunDedicatedServerRedirectMessage.port)
}

// required string token = 3;
inline bool FunDedicatedServerRedirectMessage::has_token() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FunDedicatedServerRedirectMessage::set_has_token() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FunDedicatedServerRedirectMessage::clear_has_token() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FunDedicatedServerRedirectMessage::clear_token() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& FunDedicatedServerRedirectMessage::token() const {
  // @@protoc_insertion_point(field_get:FunDedicatedServerRedirectMessage.token)
  return *token_;
}
inline void FunDedicatedServerRedirectMessage::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set:FunDedicatedServerRedirectMessage.token)
}
inline void FunDedicatedServerRedirectMessage::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set_char:FunDedicatedServerRedirectMessage.token)
}
inline void FunDedicatedServerRedirectMessage::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:FunDedicatedServerRedirectMessage.token)
}
inline ::std::string* FunDedicatedServerRedirectMessage::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:FunDedicatedServerRedirectMessage.token)
  return token_;
}
inline ::std::string* FunDedicatedServerRedirectMessage::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FunDedicatedServerRedirectMessage::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:FunDedicatedServerRedirectMessage.token)
}

// -------------------------------------------------------------------

// FunDedicatedServerMesseage

// optional .FunDedicatedServerRedirectMessage redirect = 1;
inline bool FunDedicatedServerMesseage::has_redirect() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FunDedicatedServerMesseage::set_has_redirect() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FunDedicatedServerMesseage::clear_has_redirect() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FunDedicatedServerMesseage::clear_redirect() {
  if (redirect_ != NULL) redirect_->::FunDedicatedServerRedirectMessage::Clear();
  clear_has_redirect();
}
inline const ::FunDedicatedServerRedirectMessage& FunDedicatedServerMesseage::redirect() const {
  // @@protoc_insertion_point(field_get:FunDedicatedServerMesseage.redirect)
  return redirect_ != NULL ? *redirect_ : *default_instance_->redirect_;
}
inline ::FunDedicatedServerRedirectMessage* FunDedicatedServerMesseage::mutable_redirect() {
  set_has_redirect();
  if (redirect_ == NULL) redirect_ = new ::FunDedicatedServerRedirectMessage;
  // @@protoc_insertion_point(field_mutable:FunDedicatedServerMesseage.redirect)
  return redirect_;
}
inline ::FunDedicatedServerRedirectMessage* FunDedicatedServerMesseage::release_redirect() {
  clear_has_redirect();
  ::FunDedicatedServerRedirectMessage* temp = redirect_;
  redirect_ = NULL;
  return temp;
}
inline void FunDedicatedServerMesseage::set_allocated_redirect(::FunDedicatedServerRedirectMessage* redirect) {
  delete redirect_;
  redirect_ = redirect;
  if (redirect) {
    set_has_redirect();
  } else {
    clear_has_redirect();
  }
  // @@protoc_insertion_point(field_set_allocated:FunDedicatedServerMesseage.redirect)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::FunRedirectMessage_Protocol> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FunRedirectMessage_Protocol>() {
  return ::FunRedirectMessage_Protocol_descriptor();
}
template <> struct is_proto_enum< ::FunRedirectMessage_Encoding> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FunRedirectMessage_Encoding>() {
  return ::FunRedirectMessage_Encoding_descriptor();
}
template <> struct is_proto_enum< ::FunRedirectConnectMessage_Result> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FunRedirectConnectMessage_Result>() {
  return ::FunRedirectConnectMessage_Result_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_funapi_2fservice_2fredirect_5fmessage_2eproto__INCLUDED
